//The grammar for grammarian's language, which is a superset of Lark.
start: (_item | _NL)*

_item: rule
     | token
     | statement

rule: rulename priority? ":" productiondefinition _NL
token: tokenname priority? ":" productiondefinition _NL

productiondefinition: expansions

priority: "." NUMBER

statement: "%ignore" expansions _NL                -> ignorestmt
         | "%import" import_args ["->" TOKEN] _NL  -> importstmt
         | "%declare" namereference+                        -> declarestmt

import_args: namereference ("." namereference)*

?expansions: alias (_VBAR alias)*

?alias: expansion ["->" rulename]

?expansion: expr*

//?expr: atom  [OP | "~" NUMBER [".." NUMBER]]

?expr: atom quantifier?

quantifier: qsymbol | qnumberrange
qsymbol: OP
qnumberrange: "~" NUMBER [".." NUMBER]

?atom: "(" expansions ")" -> group
     | "[" expansions "]" -> maybe
     | STRING ".." STRING -> literal_range
     | namereference
     | (REGEXP | STRING) -> literal

namereference: rulename | tokenname

_VBAR: _NL? "|"
OP: /[+*][?]?|[?](?![a-z])/
//RULE: /!?[_?]?[a-z][_a-z0-9]*/
//TOKEN: /_?[A-Z][_A-Z0-9]*/

rulename: RULESHAPE? RULE
tokenname: TOKENSHAPE? TOKEN
RULE: /[a-z][_a-z0-9]*/
TOKEN: /[A-Z][_A-Z0-9]*/

RULESHAPE: "!" | "!"? ("_"|"?")
TOKENSHAPE: "_"

STRING: _STRING "i"?
REGEXP: /\/(?!\/)(\\\/|\\\\|[^\/\n])*?\/[imslux]*/
_NL: /(\r?\n)+\s*/

%import common.ESCAPED_STRING -> _STRING
%import common.INT -> NUMBER
%import common.WS_INLINE

COMMENT: "//" /[^\n]/*

%ignore WS_INLINE
%ignore COMMENT