cardtext: ability (NEWLINE+ ability)*

ability: (abilityworddecorator | remindertextdecorator)? statementblock remindertextdecorator? -> regularability
| keywordlist remindertextdecorator?
abilityworddecorator: "ABILITYWORD" DASH //WORD+ DASH
remindertextdecorator: /\(.*?\)/

keywordlist: keywordsequence
keywordsequence: keywordabilitydeclaration (("," | ";") keywordabilitydeclaration)*

statementblock : (statement)+ | activationstatement

statement: statementwithouttrailingsubstatements "." | standaloneconditionalstatement "." | compoundstatement "." | modalstatement

statementwithouttrailingsubstatements: statementexpression

activationstatement: statementexpression ("," statementexpression)* ":" statementblock
modalstatement:  "choose" statementexpression DASH modalchoicestatement (NEWLINE modalchoicestatement)+
modalchoicestatement: MODALCHOICE abilityworddecorator? statementblock remindertextdecorator?

compoundstatement: (statementwithouttrailingsubstatements | compoundconditionalstatement) ("," (statementwithouttrailingsubstatements | compoundconditionalstatement))* ","? "then" (statementwithouttrailingsubstatements | standaloneconditionalstatement) -> compoundthenstatement
| (statementwithouttrailingsubstatements | compoundconditionalstatement) ("," (statementwithouttrailingsubstatements | compoundconditionalstatement))* ","? "and" (statementwithouttrailingsubstatements | standaloneconditionalstatement) -> compoundandstatement
| (statementwithouttrailingsubstatements | compoundconditionalstatement) ("," (statementwithouttrailingsubstatements | compoundconditionalstatement))* ","? "or" (statementwithouttrailingsubstatements | standaloneconditionalstatement) -> compoundorstatement

compoundconditionalstatement: condition statementexpression
| statementexpression condition -> compoundconditionalinv
| conditionalresult postfixexpression -> compoundconditionalresult

standaloneconditionalstatement: "then"? condition statementexpression postfixexpression? "," "then"? (conditionalresult postfixexpression? | standaloneconditionalstatement)
conditionalresult: statementwithouttrailingsubstatements
postfixexpression: "instead" | "rather" "than" statementwithouttrailingsubstatements | condition statementexpression | postfixexpression ("and" | "or" | "and/or") postfixexpression

condition: "only"? "if" -> ifcondition
| "whenever" -> whenevercondition
| "when" -> whencondition
| "as" -> ascondition
| "as" "long" "as" -> aslongascondition
| "until" -> untilcondition
| "after" -> aftercondition
| "otherwise" -> otherwisecondition
| "unless" -> unlesscondition
| "while" -> whilecondition
| ("during" | "only during") -> duringcondition
| "except" -> exceptcondition
| "the" "next" "time" -> thennexttimecondition
| "before" -> beforecondition
| "for" "each" "time"? -> beforecondition
| "at" -> atcondition
| "as" "an" "additional" "cost" "to"? -> asanadditionalcostcondition

statementexpression: expressionordeclaration

DASH: "—"
MODALCHOICE: "•"
%import common.UCASE_LETTER -> UCASE_LETTER
%import common.LCASE_LETTER -> LCASE_LETTER
//%import common.WORD -> WORD
%import common.NEWLINE -> NEWLINE
//%import common.NUMBER -> NUMBER
%import common.SIGNED_NUMBER -> NUMBER
%import common.WS -> WS
%ignore WS