cardtext.5: ability (NEWLINE+ ability)*

ability.5: (abilityworddecorator  | remindertextdecorator)? statementblock remindertextdecorator? -> regularability
| keywordlist remindertextdecorator?
abilityworddecorator.5: ARBITRARYWORD+ DASH
remindertextdecorator.5: /\(.*?\)/

keywordlist.5: keywordsequence
keywordsequence.5: keywordabilitydeclaration (("," | ";") keywordabilitydeclaration)*

statementblock : (statement)+ | activationstatement

statement.5: statementwithouttrailingsubstatements "." | standaloneconditionalstatement "." | compoundstatement "." | modalstatement

statementwithouttrailingsubstatements.5: statementexpression

activationstatement.5: statementexpression ("," statementexpression)* ":" statementblock
modalstatement.5:  "choose" statementexpression DASH modalchoicestatement (NEWLINE modalchoicestatement)+
modalchoicestatement.5: MODALCHOICE abilityworddecorator? statementblock remindertextdecorator?

compoundstatement.5: (statementwithouttrailingsubstatements | compoundconditionalstatement) ("," (statementwithouttrailingsubstatements | compoundconditionalstatement))* ","? "then" (statementwithouttrailingsubstatements | standaloneconditionalstatement) -> compoundthenstatement
| (statementwithouttrailingsubstatements | compoundconditionalstatement) ("," (statementwithouttrailingsubstatements | compoundconditionalstatement))* ","? "and" (statementwithouttrailingsubstatements | standaloneconditionalstatement) -> compoundandstatement
| (statementwithouttrailingsubstatements | compoundconditionalstatement) ("," (statementwithouttrailingsubstatements | compoundconditionalstatement))* ","? "or" (statementwithouttrailingsubstatements | standaloneconditionalstatement) -> compoundorstatement

compoundconditionalstatement.5: condition statementexpression
| statementexpression condition -> compoundconditionalinv
| conditionalresult postfixexpression -> compoundconditionalresult

standaloneconditionalstatement.5: "then"? condition statementexpression postfixexpression? "," "then"? (conditionalresult postfixexpression? | standaloneconditionalstatement)
conditionalresult.5: statementwithouttrailingsubstatements
postfixexpression.5: "instead" | "rather" "than" statementwithouttrailingsubstatements | condition statementexpression | postfixexpression ("and" | "or" | "and/or") postfixexpression

condition.5: "only"? "if" -> ifcondition
| "whenever" -> whenevercondition
| "when" -> whencondition
| "as" -> ascondition
| "as" "long" "as" -> aslongascondition
| "until" -> untilcondition
| "after" -> aftercondition
| "otherwise" -> otherwisecondition
| "unless" -> unlesscondition
| "while" -> whilecondition
| ("during" | "only during") -> duringcondition
| "except" -> exceptcondition
| "the" "next" "time" -> thennexttimecondition //TODO: "This condition may be able to be removed, with "the next time..." being a declaration
| "before" -> beforecondition
| "for" "each" "time"? -> beforecondition //TODO: This probably can just be "for", with "each time" being a declaration.
| "at" -> atcondition
| "as" "an" "additional" "cost" "to"? -> asanadditionalcostcondition //TODO: This probably can just be "as", with "an additional cost to..." being a declaration.

statementexpression.5: expressionordeclaration

DASH.100: "‒" | "—"
MODALCHOICE.100: "•"
%import common.UCASE_LETTER -> UCASE_LETTER
%import common.LCASE_LETTER -> LCASE_LETTER
%import common.WORD -> WORD
%import common.NEWLINE -> NEWLINE
//%import common.NUMBER -> NUMBER
%import common.SIGNED_NUMBER -> NUMBER
%import common.WS -> WS
%ignore WS